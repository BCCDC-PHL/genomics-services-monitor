#!/usr/bin/env python3

import argparse
import datetime
import json
import os
import subprocess
import sys
import time


def parse_services_list(services_list_path):
    """
    """
    services = []
    with open(services_list_path) as f:
        for line in f:
            if line.strip() != "":
                services.append(line.strip())

    return services


def check_service(service_name):
    """
    """
    timestamp_checked = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    result = subprocess.run(["systemctl", "--user", "show", service_name], capture_output=True, text=True, check=True)
    output = result.stdout.split('\n')
    account = os.getlogin()
    service = {
        'timestamp_checked': timestamp_checked,
        'account': account
    }
    collected_keys_lookup = {
        'Id': 'service_id',
        'ActiveState': 'active_state',
        'SubState': 'sub_state',
        'ExecMainStartTimestamp': 'timestamp_started',
    }
    keys_to_collect = set(collected_keys_lookup.keys())
    for entry in output:
        kv = entry.split("=", 1)
        if len(kv) == 2:
            k, v = kv
            if k in keys_to_collect:
                if k == 'ExecMainStartTimestamp':
                    v = ' '.join(v.split(' ')[1:3])

                service[collected_keys_lookup[k]] = v

    service['service_name'] = service['service_id'].removesuffix('.service')

    print(json.dumps(service, indent=2))
    return service


def parse_service_status(service_status_path):
    """
    """
    service_status = []
    with open(service_status_path, 'r') as f:
        try:
            service_status = json.load(f)
        except Exception as e:
            pass

    return service_status


def update_service_status(previous_service_status, current_service_status):
    """
    """
    keys_to_update = [
        'active_state',
        'sub_state',
        'timestamp_started',
        'timestamp_checked',
    ]
    for k in keys_to_update:
        if k in current_service_status:
            previous_service_status[k] = current_service_status[k]

    if current_service_status['active_state'] == 'active':
        previous_service_status['timestamp_last_active'] = current_service_status['timestamp_checked']

    return previous_service_status.copy()


def main(args):
    if not os.path.exists(args.service_status_output):
        with open(args.service_status_output, 'w') as f:
            f.write('[]\n')

    while True:
        try:
            services = parse_services_list(args.services_list)
            previous_service_statuses = parse_service_status(args.service_status_output)
            current_service_statuses = []

            for service in services:
                current_service_status = check_service(service)
                for previous_service_status in previous_service_statuses:
                    if current_service_status['service_id'] == previous_service_status['service_id']:
                        current_service_status = update_service_status(previous_service_status, current_service_status)
                current_service_statuses.append(current_service_status)

            with open(args.service_status_output, 'w') as f:
                json.dump(current_service_statuses, f, indent=2)
            time.sleep(args.scan_interval_seconds)
        except KeyboardInterrupt as e:
            timestamp_checked = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            for service_status in previous_service_statuses:
                if service_status['service_id'] == 'genomics-services-monitor.service':
                   service_status['active_state'] = 'inactive'
                   service_status['timestamp_checked'] = timestamp_checked
            with open(args.service_status_output, 'w') as f:
                json.dump(previous_service_statuses, f, indent=2)

            exit(-1)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--services-list')
    parser.add_argument('--service-status-output')
    parser.add_argument('--scan-interval-seconds', type=int, default=60)
    args = parser.parse_args()
    main(args)
